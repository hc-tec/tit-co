// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_2eproto;
class BaseProtocolBuf;
struct BaseProtocolBufDefaultTypeInternal;
extern BaseProtocolBufDefaultTypeInternal _BaseProtocolBuf_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BaseProtocolBuf* Arena::CreateMaybeMessage<::BaseProtocolBuf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class BaseProtocolBuf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BaseProtocolBuf) */ {
 public:
  inline BaseProtocolBuf() : BaseProtocolBuf(nullptr) {}
  ~BaseProtocolBuf() override;
  explicit PROTOBUF_CONSTEXPR BaseProtocolBuf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseProtocolBuf(const BaseProtocolBuf& from);
  BaseProtocolBuf(BaseProtocolBuf&& from) noexcept
    : BaseProtocolBuf() {
    *this = ::std::move(from);
  }

  inline BaseProtocolBuf& operator=(const BaseProtocolBuf& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseProtocolBuf& operator=(BaseProtocolBuf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseProtocolBuf& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseProtocolBuf* internal_default_instance() {
    return reinterpret_cast<const BaseProtocolBuf*>(
               &_BaseProtocolBuf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BaseProtocolBuf& a, BaseProtocolBuf& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseProtocolBuf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseProtocolBuf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseProtocolBuf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseProtocolBuf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseProtocolBuf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BaseProtocolBuf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseProtocolBuf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BaseProtocolBuf";
  }
  protected:
  explicit BaseProtocolBuf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 6,
    kMagicFieldNumber = 1,
    kVersionFieldNumber = 2,
    kTypeFieldNumber = 3,
    kReqIdFieldNumber = 4,
    kDataLenFieldNumber = 5,
  };
  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 magic = 1;
  void clear_magic();
  uint32_t magic() const;
  void set_magic(uint32_t value);
  private:
  uint32_t _internal_magic() const;
  void _internal_set_magic(uint32_t value);
  public:

  // uint32 version = 2;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // uint32 type = 3;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 req_id = 4;
  void clear_req_id();
  uint32_t req_id() const;
  void set_req_id(uint32_t value);
  private:
  uint32_t _internal_req_id() const;
  void _internal_set_req_id(uint32_t value);
  public:

  // uint32 data_len = 5;
  void clear_data_len();
  uint32_t data_len() const;
  void set_data_len(uint32_t value);
  private:
  uint32_t _internal_data_len() const;
  void _internal_set_data_len(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:BaseProtocolBuf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint32_t magic_;
    uint32_t version_;
    uint32_t type_;
    uint32_t req_id_;
    uint32_t data_len_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BaseProtocolBuf

// uint32 magic = 1;
inline void BaseProtocolBuf::clear_magic() {
  _impl_.magic_ = 0u;
}
inline uint32_t BaseProtocolBuf::_internal_magic() const {
  return _impl_.magic_;
}
inline uint32_t BaseProtocolBuf::magic() const {
  // @@protoc_insertion_point(field_get:BaseProtocolBuf.magic)
  return _internal_magic();
}
inline void BaseProtocolBuf::_internal_set_magic(uint32_t value) {
  
  _impl_.magic_ = value;
}
inline void BaseProtocolBuf::set_magic(uint32_t value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:BaseProtocolBuf.magic)
}

// uint32 version = 2;
inline void BaseProtocolBuf::clear_version() {
  _impl_.version_ = 0u;
}
inline uint32_t BaseProtocolBuf::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t BaseProtocolBuf::version() const {
  // @@protoc_insertion_point(field_get:BaseProtocolBuf.version)
  return _internal_version();
}
inline void BaseProtocolBuf::_internal_set_version(uint32_t value) {
  
  _impl_.version_ = value;
}
inline void BaseProtocolBuf::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:BaseProtocolBuf.version)
}

// uint32 type = 3;
inline void BaseProtocolBuf::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t BaseProtocolBuf::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t BaseProtocolBuf::type() const {
  // @@protoc_insertion_point(field_get:BaseProtocolBuf.type)
  return _internal_type();
}
inline void BaseProtocolBuf::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void BaseProtocolBuf::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BaseProtocolBuf.type)
}

// uint32 req_id = 4;
inline void BaseProtocolBuf::clear_req_id() {
  _impl_.req_id_ = 0u;
}
inline uint32_t BaseProtocolBuf::_internal_req_id() const {
  return _impl_.req_id_;
}
inline uint32_t BaseProtocolBuf::req_id() const {
  // @@protoc_insertion_point(field_get:BaseProtocolBuf.req_id)
  return _internal_req_id();
}
inline void BaseProtocolBuf::_internal_set_req_id(uint32_t value) {
  
  _impl_.req_id_ = value;
}
inline void BaseProtocolBuf::set_req_id(uint32_t value) {
  _internal_set_req_id(value);
  // @@protoc_insertion_point(field_set:BaseProtocolBuf.req_id)
}

// uint32 data_len = 5;
inline void BaseProtocolBuf::clear_data_len() {
  _impl_.data_len_ = 0u;
}
inline uint32_t BaseProtocolBuf::_internal_data_len() const {
  return _impl_.data_len_;
}
inline uint32_t BaseProtocolBuf::data_len() const {
  // @@protoc_insertion_point(field_get:BaseProtocolBuf.data_len)
  return _internal_data_len();
}
inline void BaseProtocolBuf::_internal_set_data_len(uint32_t value) {
  
  _impl_.data_len_ = value;
}
inline void BaseProtocolBuf::set_data_len(uint32_t value) {
  _internal_set_data_len(value);
  // @@protoc_insertion_point(field_set:BaseProtocolBuf.data_len)
}

// bytes data = 6;
inline void BaseProtocolBuf::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& BaseProtocolBuf::data() const {
  // @@protoc_insertion_point(field_get:BaseProtocolBuf.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaseProtocolBuf::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BaseProtocolBuf.data)
}
inline std::string* BaseProtocolBuf::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:BaseProtocolBuf.data)
  return _s;
}
inline const std::string& BaseProtocolBuf::_internal_data() const {
  return _impl_.data_.Get();
}
inline void BaseProtocolBuf::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* BaseProtocolBuf::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* BaseProtocolBuf::release_data() {
  // @@protoc_insertion_point(field_release:BaseProtocolBuf.data)
  return _impl_.data_.Release();
}
inline void BaseProtocolBuf::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BaseProtocolBuf.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_2eproto
